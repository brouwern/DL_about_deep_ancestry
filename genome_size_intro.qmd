---
title: "Tutorial: How big is a genome? Exploring size and scope of the human genome in Python"
format: html
---

## Introduction 

This tutorial uses basic libraries in Python to explore how big the human genome is and the volume of data generate when we submit a sample to a genetic testing service like 23andMe.

## Preliminaries

### Libraries

We'll use standard Python data science libraries in this tutorial, including pandas, seaborn, and numpy.

```{python}
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
```

### Data

The main dataset in this tutorial is a table of chromosome lengths from the [NCBI](https://www.ncbi.nlm.nih.gov/grc/human/data?asm=GRCh37).

This is a small dataset, so we can quickly build a pandas dataframe from the data:
```{python}
#| echo: true
# raw data lists
chromo_numeric = [1,2,3,4,5,6,7,8,9,10,
                  11,12,13,14,15,16,17,
                  18,19,20,21,22,23,24,25]
chromo_str = ["1","2","3","4","5","6","7","8","9","10",
                  "11","12","13","14","15","16","17",
                  "18","19","20","21","22","X","Y","Mito"]
chromo_len = [249250621,243199373,198022430,191154276,180915260,
                171115067,159138663,146364022,141213431,135534747,135006516,
                133851895,115169878,107349540,102531392,90354753,81195210,78077248,59128983,
                63025520,48129895,51304566,155270560,59373566,16569]

# convert to series
chromo_numeric_ser = pd.Series(chromo_numeric)
chromo_str_ser = pd.Series(chromo_str)
chromo_len_ser    = pd.Series(chromo_len)

## additional info
snps_approx = chromo_len_ser*0.04
#chromo_type = ["Autosome","Sex","Organelle"]
#chromo_type = np.repeat(chrom_type, [22,2,1], axis=0)
#chromo_type_ser = pd.Series(chromo_type)

## build pandas dataframe
chromo_info = pd.DataFrame({"chrom_numeric": chromo_numeric_ser,
                           "chromo_str": chromo_str_ser,
                           #"chrom_type": chromo_type_ser,
                           "chrom_len":   chromo_len_ser,
                           "snps_approx": snps_approx})
```

The assembled data looks like this:
```{python}
#| echo: true
chromo_info
```


## Data visualization

### Chromosome size

```{python}
sns.barplot(data = chromo_info,
                x = "chrom_len",
                y = "chrom_numeric",
                orient = 'h'#,
                #hue = "chrom_type"
                );
```

### How much of human genome is examined by 23andMe?


Calculations
```{python}
total = chromo_len_ser.sum()
snps_23_and_me = 929045 # from 1117.23andme.txt
other = total -snps_23_and_me
snps_percent = snps_23_and_me/total*100
print("Approximately", round(snps_percent,3), "percent of our genome is represented in data from 23andMe")
```


Piegraph
```{python}
plt.close()
plt.pie([snps_23_and_me,other],
 labels=["23andme\nPositions","Rest of\ngenome"]) ;
```


How much of our genome is examined in research-grade datasets?
```{python}
genomes1k = 125484020 # Byrska-Bishop et al 2022
other = total -genomes1k
snps_1kgpercent = genomes1k/total*100

```

Pie graph
```{python}
plt.close()
plt.pie([genomes1k,other],
 labels=["1000 Genomes\nProject","Rest of\ngenome"]) ;
```

### Chromosome size versus amount survey

```{python}
plt.close()
bar1 = sns.barplot(data = chromo_info,
x = "chrom_len",
y = "chrom_numeric",
orient = 'h'#,
    #hue = "chrom_type"
    );

bar2 = sns.barplot(x="snps_approx", y="chrom_numeric", data = chromo_info,color='lightblue',orient = 'h');

top_bar = mpatches.Patch(color='darkblue', label='x')
bottom_bar = mpatches.Patch(color='lightblue', label='y')


plt.show()
```


## Size of consumer genomics industry

TODO: data source
```{python}
mil = 1000000
plt.close()
N = [25000000/mil,14000000/mil,8000000/mil,1628438/mil,300000/mil]
company = ["Ancestry.com","23andMe","MyHeritage","Family Tree DNA\nFamily Finder","Living DNA"]

df = pd.DataFrame({"DNA tests (millions)": N,
                    "Company": company})

sns.barplot(data = df,y = "DNA tests (millions)", x = "Company")
```



```{python}
plt.close()
# library
import matplotlib.pyplot as plt
from matplotlib_venn import venn2
# 949904
# 246554
# Use the venn2 function
venn2(subsets = (950000-250000-72000, 250000-72000, 72000), set_labels = ('23andMe', 'Xing et al. 2010'))
plt.show()
```

```{python}
plt.close()
from matplotlib_venn import venn2
venn2(subsets = (3, 2, 1))
plt.show()
```

```{python}
plt.close()
from matplotlib_venn import venn3
venn3(subsets = (0, 0, 72000,  # 1, 2, 1 vs 2
                 125000000-950000-250000-72000, 950000-72000, 250000-72000,  # 3, 3 vs 1, 3 vs 2
                 72000),       # all shared
                 set_labels = ('Set1', 'Set2', 'Set3'))
plt.show()
```


```{python}
plt.close()
from matplotlib import pyplot as plt
import numpy as np
from matplotlib_venn import venn3, venn3_circles
plt.figure(figsize=(4,4))
v = venn3(subsets=(125000000, 950000, 250000, 
                   950000, 250000, 1, 
                   1), 
          set_labels = ('A', 'B', 'C'))
v.get_patch_by_id('100').set_alpha(1.0)
v.get_patch_by_id('100').set_color('white')
v.get_label_by_id('100').set_text('Unknown')
v.get_label_by_id('A').set_text('Set "A"')
c = venn3_circles(subsets=(1, 1, 1, 1, 1, 1, 1), linestyle='dashed')
c[0].set_lw(1.0)
c[0].set_ls('dotted')
plt.title("Sample Venn diagram")
plt.annotate('Unknown set', xy=v.get_label_by_id('100').get_position() - np.array([0, 0.05]), xytext=(-70,-70),
             ha='center', textcoords='offset points', bbox=dict(boxstyle='round,pad=0.5', fc='gray', alpha=0.1),
             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.5',color='gray'))
plt.show()
```


```{python}

```